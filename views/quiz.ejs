<!DOCTYPE html>
<html>
  <head>
    <title>Quiz App</title>
    <style>
      body {
        font-family: sans-serif;
      }

      h1,
      h2 {
        text-align: center;
      }

      ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      li {
        margin-bottom: 1em;
      }

      #category-buttons {
        display: flex;
        justify-content: center;
        margin-bottom: 1em;
      }

      #category-buttons button {
        margin: 0 0.5em;
      }

      #category-buttons button.active {
        background-color: #4caf50;
        color: white;
      }

      #pagination {
        display: flex;
        justify-content: center;
        margin-top: 1em;
      }

      #pagination button {
        margin: 0 0.5em;
      }
    </style>
  </head>
  <body>
    <h1>Quiz App</h1>
    <h2 id="category-title"></h2>
    <ul id="question-list"></ul>
    <div id="category-buttons">
      <button data-category-id="1">Category 1</button>
      <button data-category-id="2">Category 2</button>
      <button data-category-id="3">Category 3</button>
    </div>
    <div id="pagination">
      <button id="prev-page">Prev</button>
      <button id="next-page">Next</button>
    </div>
    <script>
      const categoryTitle = document.getElementById("category-title");
      const questionList = document.getElementById("question-list");
      const categoryButtons = document.getElementById("category-buttons");
      const prevPageButton = document.getElementById("prev-page");
      const nextPageButton = document.getElementById("next-page");

      let currentCategoryId = 1;
      let currentPage = 1;
      let totalPages = 1;

      const loadQuestionsByCategory = async (categoryId, page) => {
        try {
            console.log("fhdfhbn");
          // Send an AJAX request to retrieve the quiz questions for the specified category and page
          const response = await fetch(`/quiz/${categoryId}?page=${page}`);
          if (!response.ok) {
            throw new Error(
              `Failed to retrieve quiz questions: ${response.status} ${response.statusText}`
            );
          }
          const data = await response.json();
          console.log("viren o",response.status);
          // Update the category title and question list
          categoryTitle.textContent = `Category ${categoryId}`;
          questionList.innerHTML = data.questions
            .map(
              (question) => `
            <li>${question.question_text}</li>
          `
            )
            .join("");

          // Update the pagination controls
          currentPage = page;
          totalPages = data.totalPages;
          updatePaginationControls();

          // Update the active button
          const activeButton = categoryButtons.querySelector(".active");
          if (activeButton) {
            activeButton.classList.remove("active");
          }
          const newActiveButton = categoryButtons.querySelector(
            `button[data-category-id="${categoryId}"]`
          );
          newActiveButton.classList.add("active");
        } catch (error) {
          console.log(error);
        }
      };

      const updatePaginationControls = () => {
        prevPageButton.disabled = currentPage === 1;
        nextPageButton.disabled = currentPage === totalPages;
      };

      //
      const handleCategoryButtonClick = (event) => {
        const newCategoryId = parseInt(
          event.target.getAttribute("data-category-id")
        );
        if (newCategoryId !== currentCategoryId) {
          currentCategoryId = newCategoryId;
          loadQuestionsByCategory(currentCategoryId, 1);
        }
      };

      const handlePrevPageButtonClick = () => {
        if (currentPage > 1) {
          loadQuestionsByCategory(currentCategoryId, currentPage - 1);
        }
      };

      const handleNextPageButtonClick = () => {
        if (currentPage < totalPages) {
          loadQuestionsByCategory(currentCategoryId, currentPage + 1);
        }
      };

      // Attach event listeners to the category buttons and pagination controls
      categoryButtons.addEventListener("click", handleCategoryButtonClick);
      prevPageButton.addEventListener("click", handlePrevPageButtonClick);
      nextPageButton.addEventListener("click", handleNextPageButtonClick);

      // Load the initial questions for the first category
      loadQuestionsByCategory(currentCategoryId, 1);
    </script>
  </body>
</html>
